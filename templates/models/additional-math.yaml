constraints:
  set_total_flow_in:
    foreach: [nodes, techs, carriers]
    where: flow_in_total
    equations:
      - expression: sum(flow_in, over=timesteps) == flow_in_total

  set_flow_cap_max_time_varying:
    description: >
      Limit flow out in each hour according to a time varying fractional limit
      that is multiplied by the technology flow cap. This represents, for
      instance, the impact of outdoor temperature on the maximum output of a
      technology relative to its rated max output.
    foreach: [nodes, techs, carriers, timesteps]
    where: flow_cap_max_time_varying
    equations:
      - expression: flow_out <= flow_cap_max_time_varying * flow_cap * flow_out_parasitic_eff

  min_monthly_flow_in:
    foreach: [nodes, techs, carriers, monthsteps]
    where: flow_in_per_month_min
    active: false # FIXME: Need a way to map between timesteps and monthsteps
    equations:
      - expression: sum(flow_in, over=monthsteps) >= flow_in_per_month_min

  max_monthly_flow_in:
    foreach: [nodes, techs, carriers, monthsteps]
    where: flow_in_per_month_max
    active: false # FIXME: Need a way to map between timesteps and monthsteps
    equations:
      - expression: sum(flow_in, over=monthsteps) <= flow_in_per_month_max

  set_co2_consumption:
    foreach: [nodes, techs, timesteps]
    where: co2_consumption
    equations:
      - expression: flow_in[carriers=co2] == (sum(flow_in, over=carriers) - flow_in[carriers=co2]) * co2_consumption

  balance_conversion:
    description: >-
      Fix the relationship between a `conversion` technology's outflow and consumption.
    foreach: [nodes, techs, timesteps]
    where: base_tech=conversion AND NOT include_storage=true
    equations:
      - where: not co2_consumption
        expression: sum(flow_out_inc_eff, over=carriers) == sum(flow_in_inc_eff, over=carriers)
      - where: co2_consumption
        expression: sum(flow_out_inc_eff, over=carriers) == sum(flow_in_inc_eff, over=carriers) - flow_in_inc_eff[carriers=co2]

  set_flow_out_share:
    foreach: [nodes, techs, carriers, timesteps]
    where: flow_out_share
    equations:
      - expression: flow_out == sum(flow_out, over=carriers) * flow_out_share

  set_flow_in_share:
    foreach: [nodes, techs, carriers, timesteps]
    where: flow_in_share
    equations:
      - where: not co2_consumption
        expression: flow_in == sum(flow_in, over=carriers) * flow_in_share
      - where: co2_consumption
        expression: flow_in == (sum(flow_in, over=carriers) - flow_in[carriers=co2]) * flow_in_share

  link_storage_techs:
    foreach: [nodes, techs, carriers, timesteps]
    where: lookup_linked_storage_tech
    equations:
      - expression: flow_in <= select_from_lookup_arrays(flow_out, techs=lookup_linked_storage_tech)
